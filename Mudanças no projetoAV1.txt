Mudanças no projetoAV1

Apenas mudanças não cosméticas estão listadas aqui

Diversos métodos de validação foam adicionados à classe Cliente

A função Funcoes.adicionarCliente foi modificada para se beneficiar desses métodos

Mudei o método Funcoes.waitForEnter() para usar um Scanner de forma a evitar o bug que provocava o travamento do programa se fosse digitado algo a mais que um ENTER

Mudei em Main o nome do objeto Scanner "op" para "scan"

Fiz com que todo método que requeria um Scanner recebesse o Scanner de Main como parâmetro, para evitar criar vários objetos
Scanner e o problema que era gerado ao dar um .close() em um desses objetos (o Scanner em Main parava de funcionar também)
Essa medida provocou o surgimento de um ENTER fantasme em Nome: ao entrar no método adicionarCliente, mas isso foi resovido a seguir 


Troca em Main de "opcao = scan.nextInt()" por uma validação completa para evitar que o programa trave ao digitar um caractere alfabético
Como bônus isso evitou que o ENTER que sobrava após o nextInt() vazasse para a rotina adicionarCliente, provocando um ENTER
fantasma em "Nome:"

Como as funcoes imprimirFrota e imprimirCarroPeloRegistro tinham uma parte do código duplicado, transferi esse código para uma função imprimirCarroPeloIndice

Fiz várias mudanças em alugarVeiculo() para validação e evitar o vazamento de ENTER para outras funções

Mudei o arquivo carros.txt para ter o mesmo formato de clientes.txt e acrescentei cinco carros. Em consequência alterei a rotina carregarVeiculos e tive que criar uma variável global numCarrosCadastrados. Por sua vez as ocorrências de MAX_VEICULOS em várias funções foram alteradas para numCarrosCadastrados


Eu havia esquecido de usar "this." em todos os getters das classes carro e cliente;

Aumentei MAX_VEICULOS para 30. Ao contrário de clientes, o professor não definiu um número máximo de veículos.

A função salvarClientes requeria o nome do arquivo como parâmetro, enquanto a carregarClientes não precisava. Agora nenhuma das duas precisa.

Como sempre após waitForEnter() eu estava dando um clrscr(), decidi mover a chamada a clrscr() para dentro de waitForEnter() adicionando um parâmetro escolher se quero apagar ou não.


criei uma propriedade alugadoPor em Carro que vai conter o id do cliente que o está alugando

retirei o "v" do código do veiculo para facilitar as validações

Apaguei o array carrosAlugados[] e mudei todas as funções que o usavam para usar a propriedade carro.alugadoPor

Alterei novamente carros.txt para acomdar a propriedade carro.alugadoPor

Agora o programa também salva o estado dos alugueis (salva o array carros[])

Implementei formatação automática do número de telefone em setTelefone()

Implementei formatação automática do CPF em setCpf()

Implementei função para listar os veículos alugados e os respectivos clientes. Incluí opção no  menu.

Implementei função encerrarAluguel. Incluí opção no  menu.


Unifiquei as funções de formatação de CPF e telefone.

Agora eu pergunto a kilometragem do veículo na hora do encerramento do aluguel e salvo isso no arquivo

A função imprimirClientesSimplificado agora mostra também o véiculo alugado. Incluí um item para ela no menu.

As funções AdicionarCliente e CarregarClientes foram alteradas para trabalhar com um objeto "cliente" intermediário
antes de salvar o cliente no array. Para acomdoar isso o trecho onde os objetos do array eram todos previamente inicializados 
	for (int i=0; i<Funcoes.MAX_CLIENTES; i++) {
	   clientes[i] = new Cliente(); //instancio os objetos
			
	}

foi apagado. Fiz isso porque me parece uma forma mais elegante e mais robusta de lidar com objetos. 
Em vez de "abrir" o elemento no array e esperar pacientemente enquanto o usuário termina de preencher os campos
usamos um objeto intermediário que faz todas as validações e que você só "aplica" no array quando estiver satisfeito.
Isso possibilitou também incluir a oportunidade de cancelar o cadastro.

O retorno da função adicionarCliente foi alterado para boolean e uso esse resultado pra decidir salvar o array;

Criei uma função editarCliente(). Incluí item no menu.

Crieu uma função Funcoes.buscarClientePeloCPF. Incluí item no menu.

Incluí em editarCliente e adcionarCliente a capacidade de verificar se o CPF fornecido pertence a um cliente já cadastrado
A inclusão disso aumentou consideravelmente a quantidade de código

Criei uma propriedade codCliente em cliente para substituir a posição do cliente na matriz como identificador
o código do cliente é gerado lendo o codCliente do último cliente armazenado e somando um.